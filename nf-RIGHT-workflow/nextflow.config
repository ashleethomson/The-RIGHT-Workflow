/*
Main configuration file:
Contains the following sections
	- Shell handling
	- External configuration files to include
	- Parameters
	- Profiles
	- Workflow introspection
	- Manifest
	- Resource requirement function
*/

/*
################################################################################
Shell handling
-e: Exit immediately when command fails
-u: Exit if variable is unset
-o pipefail: prevents piping from causing a non-zero exit status
################################################################################
*/

process.shell = ['/bin/bash', '-euo', 'pipefail']

/*
################################################################################
Pipeline configuration files
################################################################################
*/

includeConfig 'conf/base.config'

/*
################################################################################
Parameters
################################################################################
*/

params {
	// Input parameters
	help						= false
	outdir						= false
	samplesheet					= false
	email						= false
	genome						= false
	annotations					= false
	workDir						= false
	

	// Genome parameters
    assembly                    = '/Genome/Homo_sapiens.GRCh37.dna.primary_assembly.fa'
    gtf                         = '/Genome/Homo_sapiens.GRCh37.87.gtf'

	// STAR-fusion parameters (1.10.0)
	starfuse_ctat				= 'ReferencesLibraries/STAR-Fusion/ctat_genome_lib_build_dir'
	
	// Arriba parameters (2.1.0)
	arriba_staridx			    = 'ReferencesLibraries/STAR_Index_GRCh37'
	arriba_blacklist			= 'ReferencesLibraries/Arriba/blacklist_hg19_hs37d5_GRCh37_v2.1.0.tsv.gz'
	arriba_ctyoband				= 'ReferencesLibraries/Arriba/cytobands_hg19_hs37d5_GRCh37_v2.1.0.tsv'
	arriba_knownfus				= 'ReferencesLibraries/Arriba/known_fusions_hg19_hs37d5_GRCh37_v2.1.0.tsv.gz'
	arriba_proteindom			= 'ReferencesLibraries/Arriba/protein_domains_hg19_hs37d5_GRCh37_v2.1.0.gff3'

	// Fusioncatcher (1.33)
	fusioncatcher_db			= 'ReferencesLibraries/FusionCatcher'

	// SLURM specific: Defaults only, expecting to be overwritten
	max_memory					= 128.GB
	max_cpus					= 32
	max_time					= 120.h
	partition					= false
}

/*
################################################################################
Profiles
################################################################################
*/

profiles {
	standard{
		process.executor = 'local'
	}

	slurm {
		executor.name = 'slurm'
		executor.queueSize = 50

		process.executor = 'slurm'
		process.queue = params.partition
		process.clusterOptions = "--mail-user=$params.email --mail-type=FAIL"
	}

	conda {
		conda.cacheDir = "${HOME}/nf-condaEnv"
	}
}

/*
################################################################################
Workflow introspection
################################################################################
*/

report {
  enabled = true
  file = "${params.outdir}/reports/report.html"
}

timeline {
  enabled = true
  file = "${params.outdir}/reports/timeline.html"
}


dag {
  enabled = true
  file = "${params.outdir}/reports/DAG.svg"
}

trace {
  enabled = true
  fields = 'process,task_id,hash,name,attempt,status,exit,realtime,cpus,memory,%cpu,vmem,rss,submit,start,complete,duration,realtime,rchar,wchar'
  file = "${params.outdir}/reports/trace.txt"
}

/*
################################################################################
Check requested resources
################################################################################
*/

def check_resources(val, max){
	// Check CPU value doesn't exceed the node limit 
	if( val instanceof Integer ) {
		try {
			return Math.min( val, max as int)
		}
		catch( all ) {
			println "WARNING: Max cpus '${max}' is not valid. Using default value: ${val}"
			return val
		}
	}
	// Check the memory value does exceed the memory limit
	if(val instanceof nextflow.util.MemoryUnit){
		try{
			def other = max as nextflow.util.MemoryUnit
			return val.compareTo(other) == 1 ? other : val
		}
		catch(all){
			println "WARNING: Max memory '${max}' is not valid. Using default value ${val}"
			return val
		}
	}
	// Check that the time duration does not exceed walltime limits
	if( val instanceof nextflow.util.Duration ) {
		try {
			def other = max as nextflow.util.Duration
			return val.compareTo(other) == 1 ? other : val
		}
		catch( all ) {
			println "WARNING: Max time '${max}' is not valid. Using default value: ${val}"
			return val
		}  
	}
}
