process {
    
    // Default process values if label is foregone
    time = { check_resources( 4.h * task.attempt, params.max_time ) }
    memory = { check_resources( 8.GB * task.attempt, params.max_memory ) }
    cpus = { check_resources(1 * task.attempt, params.max_cpus ) }

    // Error strategy
    errorStrategy = { task.exitStatus in [143,137,104,134,139] ? 'retry' : 'terminate' }
    maxRetries = 3
    maxErrors = '-1'

    withLabel:process_starfusion {
        cpus = { check_resources( 16 * task.attempt, params.max_cpus ) }
        memory = { check_resources( 60.GB * task.attempt, params.max_memory ) }
        time = { check_resources( 24.h * task.attempt, params.max_time ) }

        conda = "$projectDir/conf/star-fusion-1.10.0.yml"
    }

    withLabel:process_arriba {
        cpus = { check_resources( 16 * task.attempt, params.max_cpus ) }
        memory = { check_resources( 40.GB * task.attempt, params.max_memory ) }
        time = { check_resources( 12.h * task.attempt, params.max_time ) }

        conda = "$projectDir/conf/arriba-2.1.0.yml"
    }

    withLabel:process_fusioncatcher_v133 {
        cpus = { check_resources( 16 * task.attempt, params.max_cpus ) }
        memory = { check_resources( 30.GB * task.attempt, params.max_memory ) }
        time = { check_resources( 24.h * task.attempt, params.max_time ) }

        conda = "$projectDir/conf/fusioncatcher-1.33.yml"
    }

    withLabel:process_low {
        cpus = { check_resources( 1 * task.attempt, params.max_cpus ) }
        memory = { check_resources( 10.GB * task.attempt, params.max_memory ) }
        time = { check_resources( 2.h * task.attempt, params.max_time ) }
    }

    withLabel:process_medium {
        cpus = { check_resources( 6 * task.attempt, params.max_cpus ) }
        memory = { check_resources( 20.GB * task.attempt, params.max_memory ) }
        time = { check_resources( 8.h * task.attempt, params.max_time ) }
    }

    withLabel:process_high {
        cpus = { check_resources( 12 * task.attempt, params.max_cpus ) }
        memory = { check_resources( 80.GB * task.attempt, params.max_memory ) }
        time = { check_resources( 24.h * task.attempt, params.max_time ) }
    }

    withLabel:process_threads {
        cpus = 8
    }
}